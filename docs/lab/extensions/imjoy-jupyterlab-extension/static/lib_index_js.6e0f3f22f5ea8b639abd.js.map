{"version":3,"file":"lib_index_js.6e0f3f22f5ea8b639abd.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1OiE;AACT;;AAEH;;AAEX;;AAEQ;;;AAGlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,eAAe;;AAExC;AACA,mCAAmC,UAAU;AAC7C;AACA,2CAA2C,qBAAqB;AAChE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,+EAAiB;AACrB;AACA;AACA;AACA;AACA,sBAAsB,4CAA4C;AAClE,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2DAAU,GAAG,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,aAAa;AACb;AACA,UAAU;AACV;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA,SAAS;AACT;AACA,mCAAmC;AACnC,2HAA2H;AAC3H;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,+DAAa;AACpC,uDAAuD,kDAAO,CAAC;AAC/D,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL,eAAe,kEAAkB;AACjC;AACA,KAAK;AACL;AACA;;;AAGA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://imjoy-jupyterlab-extension/./lib/comm-connection.js","webpack://imjoy-jupyterlab-extension/./lib/index.js"],"sourcesContent":["/* eslint max-classes-per-file: \"off\" */\n/* eslint no-underscore-dangle: \"off\" */\n\nfunction isSerializable(object) {\n  return typeof object === 'object' && object && object.toJSON;\n}\n\nfunction isObject(value) {\n  return (\n    value && typeof value === 'object' && value.constructor === Object\n  );\n}\n\n// pub_buffers and removeBuffers are taken from\n// https://github.com/jupyter-widgets/ipywidgets/blob/master/packages/base/src/utils.ts\n// Author: IPython Development Team\n// License: BSD\nexport function putBuffers(state, bufferPaths, buffers) {\n  buffers = buffers.map(b => {\n    if (b instanceof DataView) {\n      return b.buffer;\n    }\n    return b instanceof ArrayBuffer ? b : b.buffer;\n  });\n  for (let i = 0; i < bufferPaths.length; i++) {\n    const bufferPath = bufferPaths[i];\n    // say we want to set state[x][y][z] = buffers[i]\n    let obj = state;\n    // we first get obj = state[x][y]\n    for (let j = 0; j < bufferPath.length - 1; j++) {\n      obj = obj[bufferPath[j]];\n    }\n    // and then set: obj[z] = buffers[i]\n    obj[bufferPath[bufferPath.length - 1]] = buffers[i];\n  }\n}\n\n/**\n * The inverse of putBuffers, return an objects with the new state where all buffers(ArrayBuffer)\n * are removed. If a buffer is a member of an object, that object is cloned, and the key removed. If a buffer\n * is an element of an array, that array is cloned, and the element is set to null.\n * See putBuffers for the meaning of buffer_paths\n * Returns an object with the new state (.state) an array with paths to the buffers (.buffer_paths),\n * and the buffers associated to those paths (.buffers).\n */\nexport function removeBuffers(state) {\n  const buffers = [];\n  const bufferPaths = [];\n  // if we need to remove an object from a list, we need to clone that list, otherwise we may modify\n  // the internal state of the widget model\n  // however, we do not want to clone everything, for performance\n  function remove(obj, path) {\n    if (isSerializable(obj)) {\n      // We need to get the JSON form of the object before recursing.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior\n      obj = obj.toJSON();\n    }\n    if (Array.isArray(obj)) {\n      let isCloned = false;\n      for (let i = 0; i < obj.length; i++) {\n        const value = obj[i];\n        if (value) {\n          if (\n            value instanceof ArrayBuffer ||\n            ArrayBuffer.isView(value)\n          ) {\n            if (!isCloned) {\n              obj = obj.slice();\n              isCloned = true;\n            }\n            buffers.push(\n              ArrayBuffer.isView(value) ? value.buffer : value,\n            );\n            bufferPaths.push(path.concat([i]));\n            // easier to just keep the array, but clear the entry, otherwise we have to think\n            // about array length, much easier this way\n            obj[i] = null;\n          } else {\n            const newValue = remove(value, path.concat([i]));\n            // only assigned when the value changes, we may serialize objects that don't support assignment\n            if (newValue !== value) {\n              if (!isCloned) {\n                obj = obj.slice();\n                isCloned = true;\n              }\n              obj[i] = newValue;\n            }\n          }\n        }\n      }\n    } else if (isObject(obj)) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const key of Object.keys(obj)) {\n        let isCloned = false;\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          const value = obj[key];\n          if (value) {\n            if (\n              value instanceof ArrayBuffer ||\n              ArrayBuffer.isView(value)\n            ) {\n              if (!isCloned) {\n                obj = {\n                  ...obj,\n                };\n                isCloned = true;\n              }\n              buffers.push(\n                ArrayBuffer.isView(value) ? value.buffer : value,\n              );\n              bufferPaths.push(path.concat([key]));\n              delete obj[key]; // for objects/dicts we just delete them\n            } else {\n              const newValue = remove(value, path.concat([key]));\n              // only assigned when the value changes, we may serialize objects that don't support assignment\n              if (newValue !== value) {\n                if (!isCloned) {\n                  obj = {\n                    ...obj,\n                  };\n                  isCloned = true;\n                }\n                obj[key] = newValue;\n              }\n            }\n          }\n        }\n      }\n    }\n    return obj;\n  }\n  const newState = remove(state, []);\n  return {\n    state: newState,\n    buffers,\n    buffer_paths: bufferPaths,\n  };\n}\n\nclass MessageEmitter {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  emit() {\n    throw new Error('emit is not implemented');\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event])\n        this._event_handlers[event] = [];\n    } else if (this._event_handlers[event]) {\n      // remove a specific handler\n      const idx = this._event_handlers[event].indexOf(handler);\n      if (idx >= 0) {\n        this._event_handlers[event].splice(idx, 1);\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      let i = this._event_handlers[event].length;\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else if (this._debug) {\n      console.warn('unhandled event', event, data);\n    }\n  }\n}\n\nexport class Connection extends MessageEmitter {\n  constructor(config) {\n    super(config && config.debug);\n    const comm = config.kernel.createComm('imjoy_rpc');\n    comm.open({});\n    comm.onMsg = msg => {\n      const { data } = msg.content;\n      const bufferPaths = data.__buffer_paths__ || [];\n      delete data.__buffer_paths__;\n      putBuffers(data, bufferPaths, msg.buffers || []);\n      if (data.type === 'log' || data.type === 'info') {\n        console.log(data.message);\n      } else if (data.type === 'error') {\n        console.error(data.message);\n      } else {\n        if (data.peer_id) {\n          this._peer_id = data.peer_id;\n        }\n        this._fire(data.type, data);\n      }\n    };\n    this.comm = comm;\n  }\n\n  connect() {}\n\n  disconnect() {}\n\n  emit(data) {\n    data.peer_id = this._peer_id;\n    const split = removeBuffers(data);\n    split.state.__buffer_paths__ = split.buffer_paths;\n    this.comm.send(split.state, {}, {}, split.buffers);\n  }\n}\n","import { loadImJoyBasicApp } from \"imjoy-core/dist/imjoy-loader\";\nimport { DisposableDelegate } from '@lumino/disposable';\n\nimport { ToolbarButton } from '@jupyterlab/apputils';\n\nimport { version } from '../package.json';\n\nimport { Connection } from './comm-connection.js';\n\n\nasync function patchPyodideKernel(kernel){\n  const info = await kernel.info;\n  // apply patch for pyolite to make sure we have the kernel id\n  if(info.implementation === 'pyodide') {\n    const kernel_patch = `\nimport os\nimport ipykernel\nimport micropip\nimport sys\n\nawait micropip.install([ \"imjoy-rpc\"])\nimport imjoy_rpc\n\nif 'imjoy' not in sys.modules:\n    sys.modules['imjoy'] = sys.modules['imjoy_rpc']\n\nif 'IMJOY_RPC_CONNECTION' not in os.environ:\n    os.environ['IMJOY_RPC_CONNECTION'] = 'jupyter'\n\nclass Connect():\n    def __init__(self, kernel_id):\n        self.kernel_id = kernel_id\n\n    def get_connection_file(self):\n        return f\"kernel-{self.kernel_id}.json\"\n\nif not hasattr(ipykernel, 'connect'):\n    ipykernel.connect = Connect(\"${kernel.id}\")\n`;\n    const future = kernel.requestExecute({ code: kernel_patch } );\n    await future.done\n    console.log('Pyodide kernel patch applied');\n\n  }\n}\n\nclass ImjoyExtension {\n  constructor(jupyterBaseUrl) {\n    this.baseUrl = jupyterBaseUrl;\n    if (window.self !== window.top) {\n      throw new Error('Jupyter extension cannot run in an iframe.');\n    }\n    this.notebookHandlerPromise = new Promise((resolve, reject) => {\n      this.resolveNotebookHandler = resolve;\n      this.rejectNotebookHandler = reject;\n    })\n    // create an div with id= \"window-container\"\n    const container = document.createElement('div');\n    container.id = 'window-container';\n    document.body.appendChild(container)\n    let imjoy;\n    loadImJoyBasicApp({\n        process_url_query: true,\n        show_window_title: false,\n        show_progress_bar: true,\n        show_empty_window: true,\n        menu_style: { position: \"absolute\", right: 0, top: \"2px\" },\n        window_style: {width: '100%', height: '100%'},\n        main_container: null,\n        menu_container: null,\n        expose_api: false,\n        // window_manager_container: \"window-container\",\n        imjoy_api: {\n          async createWindow(_plugin, w, extra_config) {\n            if (!document.getElementById(w.window_id)) {\n              if (!w.dialog) {\n                if (document.getElementById(_plugin.id)) {\n                  const elem = document.createElement('div');\n                  elem.id = w.window_id;\n                  elem.classList.add('imjoy-inline-window');\n                  document.getElementById(_plugin.id).appendChild(elem);\n                }\n              }\n            }\n            return await imjoy.pm.createWindow(_plugin, w, extra_config);\n          },\n        }\n    }).then(async app=>{\n      console.log(`ImJoy Basic App loaded!`)\n      imjoy = app.imjoy;\n      const kernelInfo = {}\n\n      async function connectPlugin(kernel_id) {\n        if (!kernelInfo[kernel_id]) {\n          console.warn('Kernel is not ready: ' + kernel_id);\n          return;\n        }\n        const kernel = kernelInfo[kernel_id].kernel;\n        await kernel.ready;\n        const plugin = await imjoy.pm.connectPlugin(\n          new Connection({ kernel }),\n        );\n        kernelInfo[kernel_id].plugin = plugin;\n      }\n    \n      async function runNotebookPlugin(kernel_id) {\n        if (!kernelInfo[kernel_id]) {\n          console.warn('Kernel is not ready: ' + kernel_id);\n          return;\n        }\n        try {\n          const plugin = kernelInfo[kernel_id].plugin;\n          if (plugin && plugin.api.run) {\n            let config = {};\n            if (\n              plugin.config.ui &&\n              plugin.config.ui.indexOf('{') > -1\n            ) {\n              config = await app.imjoy.pm.imjoy_api.showDialog(\n                plugin,\n                plugin.config,\n              );\n            }\n            await plugin.api.run({\n              config: config,\n              data: {},\n            });\n          }\n        } catch (e) {\n          console.error(e);\n          app.showMessage(`Failed to load the plugin, error: ${e}`);\n        }\n      }\n      window.connectPlugin = async kernel_id => {\n        if (!kernel_id) {\n          console.warn(\n            'Please upgrade imjoy-rpc(>=0.3.35) by running `pip install -U imjoy-rpc`',\n          );\n          return;\n        }\n        await connectPlugin(kernel_id);\n        await runNotebookPlugin(kernel_id);\n      };\n      window._connectPlugin = async kernel_id => {\n        await connectPlugin(kernel_id);\n      };\n      window._runPluginOnly = async kernel_id => {\n        await runNotebookPlugin(kernel_id);\n      };\n\n      this.resolveNotebookHandler(async (sessionContext, panelNode, buttonNode)=>{\n        const { kernel } = sessionContext.session;\n        sessionContext.kernelChanged.connect(() => {\n          patchPyodideKernel(kernel);\n        }, sessionContext);\n        await patchPyodideKernel(kernel);\n        kernelInfo[kernel._id] = { kernel };\n        buttonNode.firstChild.innerHTML = `<img src=\"https://imjoy.io/static/img/imjoy-logo-black.svg\" style=\"height: 17px;\">`;\n        buttonNode.firstChild.onclick = () => {\n          runNotebookPlugin(kernel._id);\n        };\n      })\n    })\n    .catch(e => {\n      console.error(e);\n      this.rejectNotebookHandler(e);\n    });\n  }\n\n  /**\n   * Create a new extension object.\n   */\n  createNew(panel, context) {\n    const button = new ToolbarButton({\n      tooltip: `ImJoy JupyterLab Extension (version: ${version})`,\n    });\n    panel.toolbar.insertItem(0, 'Run ImJoy Plugin', button);\n\n    context.sessionContext.ready.then(async () => {\n      const notebookHandler = await this.notebookHandlerPromise;\n      notebookHandler(context.sessionContext, panel.node, button.node);\n    });\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n\n\nexport default {\n  id: 'imjoy-jupyterlab-extension',\n  autoStart: true,\n  activate: function (app) {\n    const jupyterBaseUrl =\n    app.serviceManager.settings.serverSettings.baseUrl;\n    app.docRegistry.addWidgetExtension(\n      'Notebook',\n      new ImjoyExtension(jupyterBaseUrl),\n    );\n    console.log(\n      'JupyterLab extension imjoy-jupyterlab-extension is activated!'\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}