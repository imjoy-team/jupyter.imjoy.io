{"version":3,"file":"node_modules_lumino_disposable_dist_index_js-_ae8d0.aaf6b19294c8d5e259cc.js","mappings":";;;;;;;;AAAA;AACA,IAAI,KAA4D,oBAAoB,mBAAO,CAAC,4EAAmB,GAAG,mBAAO,CAAC,4EAAmB;AAC7I,IAAI,CACoK;AACxK,CAAC,mDAAmD;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,0EAA0E;;AAE/E;AACA;;AAEA,mDAAmD,aAAa;;AAEhE,CAAC;AACD","sources":["webpack://imjoy-jupyterlab/./node_modules/@lumino/disposable/dist/index.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@lumino/algorithm'), require('@lumino/signaling')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@lumino/algorithm', '@lumino/signaling'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.lumino_disposable = {}, global.lumino_algorithm, global.lumino_signaling));\n}(this, (function (exports, algorithm, signaling) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\n\n    /**\n     * A disposable object which delegates to a callback function.\n     */\n    var DisposableDelegate = /** @class */ (function () {\n        /**\n         * Construct a new disposable delegate.\n         *\n         * @param fn - The callback function to invoke on dispose.\n         */\n        function DisposableDelegate(fn) {\n            this._fn = fn;\n        }\n        Object.defineProperty(DisposableDelegate.prototype, \"isDisposed\", {\n            /**\n             * Test whether the delegate has been disposed.\n             */\n            get: function () {\n                return !this._fn;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the delegate and invoke the callback function.\n         */\n        DisposableDelegate.prototype.dispose = function () {\n            if (!this._fn) {\n                return;\n            }\n            var fn = this._fn;\n            this._fn = null;\n            fn();\n        };\n        return DisposableDelegate;\n    }());\n    /**\n     * An observable disposable object which delegates to a callback function.\n     */\n    var ObservableDisposableDelegate = /** @class */ (function (_super) {\n        __extends(ObservableDisposableDelegate, _super);\n        function ObservableDisposableDelegate() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._disposed = new signaling.Signal(_this);\n            return _this;\n        }\n        Object.defineProperty(ObservableDisposableDelegate.prototype, \"disposed\", {\n            /**\n             * A signal emitted when the delegate is disposed.\n             */\n            get: function () {\n                return this._disposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the delegate and invoke the callback function.\n         */\n        ObservableDisposableDelegate.prototype.dispose = function () {\n            if (this.isDisposed) {\n                return;\n            }\n            _super.prototype.dispose.call(this);\n            this._disposed.emit(undefined);\n            signaling.Signal.clearData(this);\n        };\n        return ObservableDisposableDelegate;\n    }(DisposableDelegate));\n    /**\n     * An object which manages a collection of disposable items.\n     */\n    exports.DisposableSet = /** @class */ (function () {\n        function DisposableSet() {\n            this._isDisposed = false;\n            this._items = new Set();\n        }\n        Object.defineProperty(DisposableSet.prototype, \"isDisposed\", {\n            /**\n             * Test whether the set has been disposed.\n             */\n            get: function () {\n                return this._isDisposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the set and the items it contains.\n         *\n         * #### Notes\n         * Items are disposed in the order they are added to the set.\n         */\n        DisposableSet.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._items.forEach(function (item) {\n                item.dispose();\n            });\n            this._items.clear();\n        };\n        /**\n         * Test whether the set contains a specific item.\n         *\n         * @param item - The item of interest.\n         *\n         * @returns `true` if the set contains the item, `false` otherwise.\n         */\n        DisposableSet.prototype.contains = function (item) {\n            return this._items.has(item);\n        };\n        /**\n         * Add a disposable item to the set.\n         *\n         * @param item - The item to add to the set.\n         *\n         * #### Notes\n         * If the item is already contained in the set, this is a no-op.\n         */\n        DisposableSet.prototype.add = function (item) {\n            this._items.add(item);\n        };\n        /**\n         * Remove a disposable item from the set.\n         *\n         * @param item - The item to remove from the set.\n         *\n         * #### Notes\n         * If the item is not contained in the set, this is a no-op.\n         */\n        DisposableSet.prototype.remove = function (item) {\n            this._items.delete(item);\n        };\n        /**\n         * Remove all items from the set.\n         */\n        DisposableSet.prototype.clear = function () {\n            this._items.clear();\n        };\n        return DisposableSet;\n    }());\n    /**\n     * The namespace for the `DisposableSet` class statics.\n     */\n    (function (DisposableSet) {\n        /**\n         * Create a disposable set from an iterable of items.\n         *\n         * @param items - The iterable or array-like object of interest.\n         *\n         * @returns A new disposable initialized with the given items.\n         */\n        function from(items) {\n            var set = new DisposableSet();\n            algorithm.each(items, function (item) {\n                set.add(item);\n            });\n            return set;\n        }\n        DisposableSet.from = from;\n    })(exports.DisposableSet || (exports.DisposableSet = {}));\n    /**\n     * An observable object which manages a collection of disposable items.\n     */\n    exports.ObservableDisposableSet = /** @class */ (function (_super) {\n        __extends(ObservableDisposableSet, _super);\n        function ObservableDisposableSet() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._disposed = new signaling.Signal(_this);\n            return _this;\n        }\n        Object.defineProperty(ObservableDisposableSet.prototype, \"disposed\", {\n            /**\n             * A signal emitted when the set is disposed.\n             */\n            get: function () {\n                return this._disposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the set and the items it contains.\n         *\n         * #### Notes\n         * Items are disposed in the order they are added to the set.\n         */\n        ObservableDisposableSet.prototype.dispose = function () {\n            if (this.isDisposed) {\n                return;\n            }\n            _super.prototype.dispose.call(this);\n            this._disposed.emit(undefined);\n            signaling.Signal.clearData(this);\n        };\n        return ObservableDisposableSet;\n    }(exports.DisposableSet));\n    /**\n     * The namespace for the `ObservableDisposableSet` class statics.\n     */\n    (function (ObservableDisposableSet) {\n        /**\n         * Create an observable disposable set from an iterable of items.\n         *\n         * @param items - The iterable or array-like object of interest.\n         *\n         * @returns A new disposable initialized with the given items.\n         */\n        function from(items) {\n            var set = new ObservableDisposableSet();\n            algorithm.each(items, function (item) {\n                set.add(item);\n            });\n            return set;\n        }\n        ObservableDisposableSet.from = from;\n    })(exports.ObservableDisposableSet || (exports.ObservableDisposableSet = {}));\n\n    exports.DisposableDelegate = DisposableDelegate;\n    exports.ObservableDisposableDelegate = ObservableDisposableDelegate;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n"],"names":[],"sourceRoot":""}